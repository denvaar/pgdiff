#!/bin/bash

help() {
  echo ""
  echo "Compare what data changed in your Postgres database between two points in time."
  echo ""
  echo "USAGE: $0 <connection string> [-k key] [-d]"
  echo ""
  echo "connection string should be in the format 'postgresql://user:password@host:port/db_name'"
  echo ""
  echo "-k is used to specify a key, so as to classify data captures. Eg. The first time that a key is specified, a new capture is initialized. Next time the key is used, $0 will produce a diff of how the data changed from the initial capture."
  echo ""
  echo "-d is used to delete all keys, which is wise to do often, since the script works by making copies of entire databases. This can be used in conjunction with -k to clear a specific data capture."
  echo ""
}

pg_isready -d "$1" > /dev/null
if [[ $? -ne 0 ]]; then
  echo "Connection string is not set, or unable to connect to database (eg. 'postgresql://user:password@host:port/db_name')";
  help
  exit 1
fi

connstring="$1"
db=${connstring##*/}

shift

while getopts "k:t:dh" flag; do
  case "$flag" in
    k) id=${OPTARG} ;;
    t) tablefilter=$(printf "%s" "$OPTARG" | sed -E "s/([^,]+)/\'\1\'/g") ;;
    d) shouldclear=true ;;
    *)
      help
      exit 0
      ;;
  esac
done

if [[ $shouldclear ]]; then
  if [[ $id ]]; then
    rm -rf "/var/tmp/pgdiff/$db/$id"
    echo "[key=$id] Capture cleared"
  else
    rm -rf "/var/tmp/pgdiff"
    echo "All captures cleared"
  fi

  exit 0
fi

if [[ $tablefilter ]]; then
  tables=$(psql --no-psqlrc $connstring -t -c "select tablename from pg_tables where schemaname not in ('information_schema', 'pg_catalog') and tablename in ($tablefilter)" $db | awk 'NF {print($1)}')
else
  tables=$(psql --no-psqlrc $connstring -t -c "select tablename from pg_tables where schemaname not in ('information_schema', 'pg_catalog')" $db | awk 'NF {print($1)}')
fi

for table in $tables
do
  firstpath="/var/tmp/pgdiff/$db/$id/a"
  secondpath="/var/tmp/pgdiff/$db/$id/b"

  if [[ -f "$firstpath/$table" ]]; then
    # key exists so command must have been run with the given $id already

    # create a directory for the second capture
    mkdir -p "$secondpath"

    primarykey=$(psql --no-psqlrc $connstring -tA -c "SELECT a.attname FROM pg_index i JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey) WHERE i.indrelid = '$table'::regclass AND i.indisprimary")

    if [ -z "$primarykey" ]; then
      echo "[key=$id] [table=$table] Skipping table, no PK found"
      continue
    fi

    cpy=$(psql --no-psqlrc $connstring -t -c "\pset expanded on" -c "\pset pager off" -c "\pset null [null]" -c "select * from $table order by $primarykey" $db)

    # save the data to temp file
    echo "$cpy" | sed 1,2d > "$secondpath/$table"

    compare=$(diff -u "$firstpath/$table" "$secondpath/$table")

    if [[ $compare ]]; then
      # yeah, they different
      anydiff=true
      printf "[key=%s] [table=%s]\n\n" $id $table

      script -q /dev/null \
        git --no-pager diff \
            --no-index -- "$firstpath/$table" "$secondpath/$table" \
            < /dev/null | \
        tail -n +6
    fi

  else
    # a diff has not been captured for the given $id yet
    isnew=true

    # create a directory for the first capture
    mkdir -p "$firstpath"

    primarykey=$(psql --no-psqlrc $connstring -tA -c "SELECT a.attname FROM pg_index i JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey) WHERE i.indrelid = '$table'::regclass AND i.indisprimary")

    if [ -z "$primarykey" ]; then
      echo "[key=$id] [table=$table] Skipping table, no PK found"
      continue
    fi

    cpy=$(psql --no-psqlrc $connstring -t -c "\pset expanded on" -c "\pset pager off" -c "\pset null [null]" -c "select * from $table order by $primarykey" $db)

    # TODO test vs -c "\o /path"
    # save the data to temp file
    echo "$cpy" | sed 1,2d > "$firstpath/$table"
  fi
done

if [[ $isnew ]]; then
  echo "[key=$id] Data capture started"
else
  if ! [[ $anydiff ]]; then
    echo "[key=$id] No differences since last capture"
  fi
fi
