#!/bin/bash

help() {
  echo ""
  echo "Compare what data changed in your Postgres database between two points in time."
  echo ""
  echo "USAGE: $0 <connection string> [-k key] [-t tables] [-d]"
  echo ""
  echo "connection string should be in the format 'postgresql://user:password@host:port/db_name'"
  echo ""
  echo "-k is used to specify a key, so as to classify data captures. Eg. The first time that a key is specified, a new capture is initialized. Next time the key is used, $0 will produce a diff of how the data changed from the initial capture."
  echo ""
  echo "-t can be used to specify a comma-separated list of table names (eg. -t \"table1,table2\"). If present, then only the specified tables will be considered. This flag is a no-op when the same key has been used more than once, so you only need to use it the first time with a key."
  echo ""
  echo "-d is used to delete all keys, which is wise to do often, since the script works by making copies of entire databases. This can be used in conjunction with -k to clear a specific data capture."
  echo ""
}

if ! pg_isready -d "$1" > /dev/null || ! psql "$1" -c "select 1" > /dev/null; then
  echo "Connection string is not set, or unable to connect to database (eg. 'postgresql://user:password@host:port/db_name')";
  help
  exit 1
fi

connstring="$1"
db=${connstring##*/}

shift

while getopts "k:t:dh" flag; do
  case "$flag" in
    k) id=${OPTARG} ;;
    t) tablefilter=$(printf "%s" "$OPTARG" | sed -E "s/([^,]+)/\'\1\'/g") ;;
    d) shouldclear=true ;;
    *)
      help
      exit 0
      ;;
  esac
done

if [ -n "$shouldclear" ]; then
  if [ -n "$id" ]; then
    rm -rf "/var/tmp/pgdiff/$db/$id"
    echo "[key=$id] Capture cleared"
  else
    rm -rf "/var/tmp/pgdiff"
    echo "All captures cleared"
  fi

  exit 0
fi

firstpath="/var/tmp/pgdiff/$db/$id/a"
secondpath="/var/tmp/pgdiff/$db/$id/b"

if [ -d "$firstpath" ]; then
  tables=$(ls "$firstpath")
else
  echo "[key=$id] Creating new data capture"

  tablequery="select tablename from pg_tables where schemaname not in ('information_schema', 'pg_catalog')"

  if [ -n "$tablefilter" ]; then
    tablequery="${tablequery} and tablename in ($tablefilter)"
  fi

  tables=$(psql --no-psqlrc --quiet "$connstring" -tA  -c "\pset pager off" -c "$tablequery")
fi

for table in $tables
do
  primarykey=$(psql --no-psqlrc --quiet "$connstring" -tA  -c "\pset pager off" -c "SELECT STRING_AGG(a.attname, ',') FROM pg_index i JOIN pg_attribute a ON a.attrelid = i.indrelid AND a.attnum = ANY(i.indkey) WHERE i.indrelid = '$table'::regclass AND i.indisprimary")

  if [ -z "$primarykey" ]; then
    echo "[key=$id] [table=$table] Skipping table, no PK found"
    continue
  fi

  if [ -f "$firstpath/$table" ]; then
    # key exists so this script must have been ran with the given key already
    mkdir -p "$secondpath"
    outputpath="$secondpath/$table"
    dodiff=true
  else
    # a diff has not been captured for the given $id yet
    mkdir -p "$firstpath"
    outputpath="$firstpath/$table"
  fi

  psql --no-psqlrc --quiet "$connstring" -t -c "\pset expanded on" -c "\pset pager off" -c "\pset null [null]" -c "\o $outputpath" -c "select * from $table order by $primarykey" > /dev/null

  if [ -n "$dodiff" ]; then
    compare=$(diff -u "$firstpath/$table" "$secondpath/$table")

    if [ -n "$compare" ]; then
      # yeah, they different
      printf "[key=%s] [table=%s] Changes detected\n\n" "$id" "$table"

      script -q /dev/null \
        git --no-pager diff \
            -U10 \
            --no-index -- "$firstpath/$table" "$secondpath/$table" \
            < /dev/null | \
        tail -n +6
    fi
  fi
done
